Functions

 - the list is a linked list

 - constructing a list:
    - (list 1 2 3 4 5 6)
    - '(1 2 3 4 5 6)
    - (cons 1 '()) ; short for construct
        - (cons 2 (cons 1 '()))
        - '(1 . (2 . (3 . ())))
        - if the second par is not a list, the result is a pair
            - '(1 . 2)
            - (list? '(1 . 2)) ; (pair? '(1 . 2))


 - check whether a list doesn't have any contents
    - (null? xs)

    - (empty? xs)

    - (equal? xs '())

    - (cons? xs)


 - getting the ith element of a list (analog with a train??)
    - !!!!!!!! Must have a check to ensure validity of index!!!!!!!!

    - first element (the locomotive)
        - (frist xs) ; first '(1 2 3) => 1
        - (car xs) ; car '(1 2 3) => 1

    - second element
        - (second xs) ; second '(1 2 3) => 2

    - third, fourth .. tenth

    - the ith element
        - (list-ref xs i) ; list-ref '(1 2 3 4) 2 => 3

    - get all the wagons of the train
        - (cdr xs) ; cdr '(1 2 3 4 5 6) => '(2 3 4 5 6)

    - CCCC: Car and Cdr Complete Chaos
        - https://docs.racket-lang.org/reference/pairs.html
        - Just remember that “a” comes before “d”, and cdr is pronounced “could-er."


 - find the length (i.e. the number of elements)
    - of a list:
        - (length xs) ; length '("we" 2 "can" 5.26 "have multiple types" #f) => 6
            - use lists as if they were homogeneous
                - in order to sort, map, filter, etc
    - of a string:
        - (string-length str) ; string-length "str" => 3


 - is an element in a list
    - (member x xs)
        - returns #f => it is not
        - returns a list (that element + everything till end) => it is
        - (member 1 '(16 2 3 4))
        - (member 1 '(14 2 1 4))
        - (member 1 '(1 2 3 4))


 - reverse the contents of a list
    - (reverse xs) ; reverse '(1 2 3) => '(3 2 1)


 - combine the elements of n lists
    - (append xs ys) ; append '(1 2 3) '(4 5 6) '(7 8 9) '(10 11 12) '(13) => '(1 2 3 4 5 6 7 8 9 10 11 12 13)


 - sort the elements of a list
    - (sort xs fun) ; here fun is a function!! (sort '(1 3 2) >) => '(3 2 1)